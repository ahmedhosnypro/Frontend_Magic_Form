type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    import path from 'path';

    const pagePath = path.join(import.meta.url, '../../src/index.html');
    import {StageTest, correct, wrong, WrongAnswer} from 'hs-test-web';

    class Test extends StageTest {

        page = this.getPage(pagePath)
        secondPage = this.getPage(pagePath)

        tests = [
            this.node.execute(async () => {
                this.firstNameInput = await this.page.findBySelector("input[name='first-name']");
                if (this.firstNameInput == null) {
                    return wrong("Can't find input tag with name 'first-name'!")
                }

                this.lastNameInput = await this.page.findBySelector("input[name='last-name']");
                if (this.lastNameInput == null) {
                    return wrong("Can't find input tag with name 'last-name'!")
                }

                this.email = await this.page.findBySelector("input[name='email']");
                if (this.email == null) {
                    return wrong("Can't find input tag with name 'email'!")
                }

                this.phone = await this.page.findBySelector("input[name='phone']");
                if (this.phone == null) {
                    return wrong("Can't find input tag with name 'phone'!")
                }

                this.company = await this.page.findBySelector("input[name='company']");
                if (this.company == null) {
                    return wrong("Can't find input tag with name 'company'!")
                }

                this.address = await this.page.findBySelector("input[name='address']");
                if (this.address == null) {
                    return wrong("Can't find input tag with name 'address'!")
                }

                return correct()
            }),
            this.node.execute(async () => {
                this.navbar = await this.page.findBySelector("nav");
                if (this.navbar == null) {
                    return wrong("Can't find <nav> element!");
                }

                this.submitFormNavButton = await this.navbar.findBySelector("a#form-link");
                if (this.submitFormNavButton == null) {
                    return wrong("Can't find <a> tag with '#form-link' id inside of the <nav> tag!")
                }

                this.historyNavButton = await this.navbar.findBySelector("a#history-link");
                if (this.historyNavButton == null) {
                    return wrong("Can't find <a> tag with '#history-link' id inside of the <nav> tag!")
                }

                return correct();
            }),
            this.node.execute(async () => {

                const values = [
                    await this.firstNameInput.getProperty('value'),
                    await this.lastNameInput.getProperty('value'),
                    await this.email.getProperty('value'),
                    await this.phone.getProperty('value'),
                    await this.company.getProperty('value'),
                    await this.address.getProperty('value'),
                ]

                values.forEach(value => {
                    if (value !== '') {
                        throw new WrongAnswer("All input fields should be empty at the beginning!")
                    }
                })

                return correct()
            }),
            this.node.execute(async () => {
                const testFirstName = 'Monica'
                await this.firstNameInput.inputText(testFirstName)
                await this.page.refresh()

                let firstNameValue = await this.firstNameInput.getProperty('value')
                if (firstNameValue !== testFirstName) {
                    return wrong("After reloading the page, input field with name 'first-name' has wrong value!\n" +
                        "Expected: '" + testFirstName + "'\n" +
                        "Found: '" + firstNameValue + "'")
                }

                const testLastName = 'Meyers'
                await this.lastNameInput.inputText(testLastName)
                await this.page.refresh()

                let lastNameValue = await this.lastNameInput.getProperty('value')
                if (lastNameValue !== testLastName) {
                    return wrong("After reloading the page, input field with name 'last-name' has wrong value!\n" +
                        "Expected: '" + testLastName + "'\n" +
                        "Found: '" + lastNameValue + "'")
                }

                const testEmail = 'test@gmail.com'
                await this.email.inputText(testEmail)
                await this.page.refresh()

                let emailValue = await this.email.getProperty('value')
                if (emailValue !== testEmail) {
                    return wrong("After reloading the page, input field with name 'email' has wrong value!\n" +
                        "Expected: '" + testEmail + "'\n" +
                        "Found: '" + emailValue + "'")
                }

                const testPhone = '12345678'
                await this.phone.inputText(testPhone)
                await this.page.refresh()

                let phoneValue = await this.phone.getProperty('value')
                if (phoneValue !== testPhone) {
                    return wrong("After reloading the page, input field with name 'phone' has wrong value!\n" +
                        "Expected: " + testPhone + "'\n" +
                        "Found: '" + phoneValue + "'")
                }

                const testCompany = 'Hyperskill'
                await this.company.inputText(testCompany)
                await this.page.refresh()

                let companyValue = await this.company.getProperty('value')
                if (companyValue !== testCompany) {
                    return wrong("After reloading the page, input field with name 'company' has wrong value!\n" +
                        "Expected: " + testCompany + "'\n" +
                        "Found: '" + companyValue + "'")
                }

                const testAddress = '4733 Reppert Coal Road, Southfield, Michigan'
                await this.address.inputText(testAddress)
                await this.page.refresh()

                let addressValue = await this.address.getProperty('value')
                if (addressValue !== testAddress) {
                    return wrong("After reloading the page, input field with name 'address' has wrong value!\n" +
                        "Expected: " + testAddress + "'\n" +
                        "Found: '" + addressValue + "'")
                }

                // test a couple of the previous fields
                firstNameValue = await this.firstNameInput.getProperty('value')
                if (firstNameValue !== 'Monica') {
                    return wrong("After reloading the page, input field with name 'first-name' has wrong value!\n" +
                        "Expected: 'Monica'\n" +
                        "Found: '" + firstNameValue + "'")
                }

                phoneValue = await this.phone.getProperty('value')
                if (phoneValue !== testPhone) {
                    return wrong("After reloading the page, input field with name 'phone' has wrong value!\n" +
                        "Expected: " + testPhone + "'\n" +
                        "Found: '" + phoneValue + "'")
                }

                return correct();
            }),
            this.node.execute(async () => {
                const submitButton = await this.page.findById("submit-button");
                if (submitButton == null) {
                    return wrong("Can't find a button with 'submit-button' id!")
                }

                await submitButton.clickForNavigation({timeout: 1500}).catch(ignored => {
                })

                const values = [
                    await this.firstNameInput.getProperty('value'),
                    await this.lastNameInput.getProperty('value'),
                    await this.email.getProperty('value'),
                    await this.phone.getProperty('value'),
                    await this.company.getProperty('value'),
                    await this.address.getProperty('value'),
                ]

                values.forEach(value => {
                    if (value !== '') {
                        throw new WrongAnswer("All input fields should be empty after submitting the form " +
                            "by clicking on button with 'submit-button' id!")
                    }
                })

                return correct()
            }),
            this.node.execute(async () => {
                this.historyLinkButton = await this.page.findById('history-link')
                this.submitFormLinkButton = await this.page.findById('form-link')

                await this.historyLinkButton.clickForNavigation({timeout: 1500}).catch(err => {
                    throw new WrongAnswer("After clicking on history link with 'history link' id " +
                        "the app should navigate to another page!")
                })

                return correct()
            }),
            this.node.execute(async () => {
                const history = await this.page.findAllByClassName("submit-history-card")
                if (history.length !== 1) {
                    return wrong("On the history page expected 1 div block with 'submit-history-card' class" +
                        " after submitting the form!")
                }

                const card = history[0];

                const firstNameField = await card.findByClassName('card-first-name');
                if (firstNameField == null) {
                    return wrong("Can't find element with 'card-first-name' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const firstNameTextContent = await firstNameField.textContent();
                if (firstNameTextContent !== 'Monica') {
                    return wrong("Element with 'card-first-name' class has wrong text content!\n" +
                        "Expected: Monica\n" +
                        "Found: " + firstNameTextContent)
                }

                const lastNameField = await card.findByClassName('card-last-name');
                if (lastNameField == null) {
                    return wrong("Can't find element with 'card-last-name' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const lastNameTextContent = await lastNameField.textContent();
                if (lastNameTextContent !== 'Meyers') {
                    return wrong("Element with 'card-last-name' class has wrong text content!\n" +
                        "Expected: Meyers\n" +
                        "Found: " + lastNameTextContent)
                }

                const emailField = await card.findByClassName('card-email');
                if (emailField == null) {
                    return wrong("Can't find element with 'card-email' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const emailTextContent = await emailField.textContent();
                if (emailTextContent !== 'test@gmail.com') {
                    return wrong("Element with 'card-email' class has wrong text content!\n" +
                        "Expected: test@gmail.com\n" +
                        "Found: " + emailTextContent)
                }

                const phoneField = await card.findByClassName('card-phone');
                if (phoneField == null) {
                    return wrong("Can't find element with 'card-phone' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const phoneTextContent = await phoneField.textContent();
                if (phoneTextContent !== '12345678') {
                    return wrong("Element with 'card-phone' class has wrong text content!\n" +
                        "Expected: 12345678\n" +
                        "Found: " + phoneTextContent)
                }

                const companyField = await card.findByClassName('card-company');
                if (companyField == null) {
                    return wrong("Can't find element with 'card-company' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const companyTextContent = await companyField.textContent();
                if (companyTextContent !== 'Hyperskill') {
                    return wrong("Element with 'card-company' class has wrong text content!\n" +
                        "Expected: Hyperskill\n" +
                        "Found: " + companyTextContent)
                }

                const addressField = await card.findByClassName('card-address');
                if (addressField == null) {
                    return wrong("Can't find element with 'card-address' inside of the history " +
                        "card with 'submit-history-card' class!")
                }
                const addressTextContent = await addressField.textContent();
                if (addressTextContent !== '4733 Reppert Coal Road, Southfield, Michigan') {
                    return wrong("Element with 'card-address' class has wrong text content!\n" +
                        "Expected: 4733 Reppert Coal Road, Southfield, Michigan\n" +
                        "Found: " + addressTextContent)
                }

                return correct()
            }),
            this.node.execute(async () => {

                await this.submitFormLinkButton.clickForNavigation({timeout: 1500}).catch(err => {
                    throw new WrongAnswer("After clicking on the Form link button with 'form-link' id " +
                        "you should navigate to another page!")
                })

                await this.firstNameInput.inputText('First name');
                await this.lastNameInput.inputText('Last name');
                await this.email.inputText('Email');
                await this.phone.inputText('Phone');
                await this.company.inputText('Company');
                await this.address.inputText('Address');

                const submitButton = await this.page.findById("submit-button");
                await submitButton.clickForNavigation({timeout: 1500}).catch(ignored => {
                })

                return correct()
            }),
            this.node.execute(async () => {

                await this.historyLinkButton.clickForNavigation({timeout: 1500}).catch(err => {
                    throw new WrongAnswer("After clicking on history link with 'history link' id" +
                        "the app should navigate to another page!")
                })

                const history = await this.page.findAllByClassName("submit-history-card")
                if (history.length !== 2) {
                    return wrong("On the history page expected 2 div block with 'submit-history-card' class" +
                        " after submitting the form!")
                }

                return correct();
            }),
            this.node.execute(async () => {
                let history = await this.page.findAllByClassName("submit-history-card")

                const firstCard = history[0]

                const deleteButton = await firstCard.findBySelector('button.delete-button');

                if (deleteButton == null) {
                    return wrong("Each submit history card should contain a button with 'delete-button' class")
                }

                await deleteButton.click()

                history = await this.page.findAllByClassName("submit-history-card")
                if (history.length !== 1) {
                    return wrong("After clicking on delete button the card element should be removed from the DOM!")
                }

                await this.submitFormLinkButton.clickForNavigation({timeout: 1500}).catch(err => {
                    throw new WrongAnswer("After clicking on the Form link button with 'form-link' id " +
                        "you should navigate to another page!")
                })

                return correct()
            }),
            this.node.execute(async () => {
                await this.secondPage.open();

                const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms))

                const firstPageFirstNameField = await this.page.findBySelector("input[name='first-name']");
                const firstPagePhoneField = await this.page.findBySelector("input[name='phone']");
                const firstPageAddressField = await this.page.findBySelector("input[name='address']");

                const secondPageFirstNameField = await this.secondPage.findBySelector("input[name='first-name']");
                const secondPagePhoneField = await this.secondPage.findBySelector("input[name='phone']");
                const secondPageAddressField = await this.secondPage.findBySelector("input[name='address']");

                await firstPageFirstNameField.inputText('Test first name');
                await sleep(300)
                const secondPageFirstNameValue = await secondPageFirstNameField.getProperty('value');
                if (secondPageFirstNameValue !== 'Test first name') {
                    return wrong("Looks like input fields values doesn't sync within different tabs!")
                }

                await secondPageAddressField.inputText('Test address');
                await sleep(300)
                const firstPageAddressValue = await firstPageAddressField.getProperty('value');
                if (firstPageAddressValue !== 'Test address') {
                    return wrong("Looks like input fields values doesn't sync within different tabs!")
                }

                await firstPagePhoneField.inputText('Test phone');
                await sleep(300)
                const secondPagePhoneValue = await secondPagePhoneField.getProperty('value');
                if (secondPagePhoneValue !== 'Test phone') {
                    return wrong("Looks like input fields values doesn't sync within different tabs!")
                }

                return correct()
            })
        ]
    }

    it("Test stage", async () => {
            await new Test().runTests()
        }
    ).timeout(30000);
  learner_created: false
- name: src/style/header.css
  visible: true
  text: |-
    header {
        margin: 0;
        background: #1b1b1b;
        width: 100%;
        min-height: 3em;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    header nav {
        min-width: 50%;
        max-width: 50%;
        min-height: 3em;

        display: flex;
        flex-flow: row;
        justify-content: flex-start;
        align-items: center;
        flex-basis: border-box;
    }

    header nav a {
        margin: 0 1em 0  0;
        text-decoration: none;
        color: white;
        border: 1px solid transparent;
        padding: 0.2em 0.4em;
    }

    header nav a:hover {
        background: #925e10;
        border-radius: 0.5em;
    }
  learner_created: true
- name: src/script/form.js
  visible: true
  text: |-
    const inputFirstName = document.getElementById('first-name');
    const inputLastName = document.getElementById('last-name');
    const inputEmail = document.getElementById('email');
    const inputPhone = document.getElementById('phone');
    const inputCompany = document.getElementById('company');
    const inputAddress = document.getElementById('address');
    let submitButton = document.getElementById('submit-button');
    const inputFields = [inputFirstName, inputLastName, inputEmail, inputPhone, inputCompany, inputAddress];

    let formInputs = {};

    submitButton.addEventListener('click', () => {
        for (const field of inputFields) {
            formInputs[field.name] = field.value;
        }
        let submits = JSON.parse(localStorage.getItem('submissions')) || [];
        submits[submits.length] = formInputs;
        localStorage.setItem('submissions', JSON.stringify(submits));

        for (const field of inputFields) {
            field.value = "";
        }
        localStorage.setItem('formCash', JSON.stringify({}));
    })

    for (const field of inputFields) {
        field.addEventListener('input', () => {
            let formCash = JSON.parse(localStorage.getItem('formCash')) || {};
            formCash[field.name] = field.value;
            localStorage.setItem('formCash', JSON.stringify(formCash));
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        const formCash = JSON.parse(localStorage.getItem('formCash'));

        for (const field of inputFields) {
            const value = formCash[field.name];
            if (typeof value === 'undefined') {
                continue;
            }
            field.value = formCash[field.name];
        }
    }, false);
  learner_created: true
- name: src/history.html
  visible: true
  text: |-
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Magic Form</title>
        <link rel="stylesheet" href="style/main.css">
        <link rel="stylesheet" href="style/header.css">
        <link rel="stylesheet" href="style/history.css">
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=McLaren&display=swap" rel="stylesheet">
    </head>
    <body>
    <header>
        <nav>
            <a href="index.html" id="form-link">Form</a>
            <a href="history.html" id="history-link">History</a>
        </nav>
    </header>
    <div id="history-container">
    </div>
    <script src="script/history.js"></script>
    </body>
    </html>
  learner_created: true
- name: src/style/form.css
  visible: true
  text: |+
    main {
        width: 50%;
        min-height: 100%;
        display: flex;
        justify-content: center;
    }

    form {
        min-width: 100%;
        max-width: 100%;

        margin: 0;
        padding: 0;

        display: flex;
        flex-flow: column;
        justify-content: flex-start;
        align-items: flex-start;
    }

    form label {
        margin: 1em 0 0.5em 0.3em;
        width: 100%;
    }

    form input {
        display: block;
        outline: none;
        width: 100%;
        height: 2em;
        padding: 0.5em;
        border: 1px solid black;
        border-radius: 5px;
        background: transparent;
    }

    form input:focus {
        border: 1px solid #212529;
        border-radius: 5px;
        background: transparent;
    }

    form input:focus::placeholder{
        color: transparent;
    }

  learner_created: true
- name: src/style/history.css
  visible: true
  text: |-
    #history-container {
        width: 50%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        overflow: hidden;
    }

    p {
        color: white;
    }

    .submit-history-card {
        margin: 1em 0;
        padding-left: 0.5em;

        display: flex;
        flex-flow: column;
        justify-content: flex-start;
        align-items: flex-start;

        border: 1px solid #e28739;
        border-radius: 0.5em;
    }

    .submit-history-card p {
        margin: 0.5em 0 0.2em 0.3em;
    }

    .submit-history-card .card-data {
        min-height: 1em;
        height: 1em;
        min-width: 90%;
        width: 90%;
        margin: 0 0 0.5em 0.6em;
        padding: 0.2em;
        font-size: 0.8em;
    }
  learner_created: true
- name: src/script/history.js
  visible: true
  text: |-
    const historyContainer = document.getElementById('history-container');

    document.addEventListener('DOMContentLoaded', function () {
        let submissions = JSON.parse(localStorage.getItem('submissions')) || [];
        if (submissions.length === 0) {
            return;
        }

        submissions.forEach((submission, index) => {
            createHistory(submission, index);
        })
    }, false);

    function createHistory(submission, id) {
        const cardContainer = document.createElement('div');
        historyContainer.appendChild(cardContainer);
        cardContainer.id = `submit-${id}`;
        cardContainer.classList.add('submit-history-card');

        const firstNameLabel = document.createElement('p');
        cardContainer.appendChild(firstNameLabel);
        firstNameLabel.textContent = "First Name";

        const cardFirstName = document.createElement('p');
        cardContainer.appendChild(cardFirstName);
        cardFirstName.classList.add('card-first-name', 'card-data');
        cardFirstName.textContent = submission['first-name'];


        const lastNameLabel = document.createElement('p');
        cardContainer.appendChild(lastNameLabel);
        lastNameLabel.textContent = "Last Name";

        const cardLastName = document.createElement('p');
        cardContainer.appendChild(cardLastName);
        cardLastName.classList.add('card-last-name', 'card-data');
        cardLastName.textContent = submission['last-name'];

        const emailLabel = document.createElement('p');
        cardContainer.appendChild(emailLabel);
        emailLabel.textContent = "Email";

        const cardEmail = document.createElement('p');
        cardContainer.appendChild(cardEmail);
        cardEmail.classList.add('card-email', 'card-data');
        cardEmail.textContent = submission['email'];

        const phoneLabel = document.createElement('p');
        cardContainer.appendChild(phoneLabel);
        phoneLabel.textContent = "Phone";

        const cardPhone = document.createElement('p');
        cardContainer.appendChild(cardPhone);
        cardPhone.classList.add('card-phone', 'card-data');
        cardPhone.textContent = submission['phone'];

        const companyLabel = document.createElement('p');
        cardContainer.appendChild(companyLabel);
        companyLabel.textContent = "Company";

        const cardCompany = document.createElement('p');
        cardContainer.appendChild(cardCompany);
        cardCompany.classList.add('card-company', 'card-data');
        cardCompany.textContent = submission['company'];

        const addressLabel = document.createElement('p');
        cardContainer.appendChild(addressLabel);
        addressLabel.textContent = "Address";

        const cardAddress = document.createElement('p');
        cardContainer.appendChild(cardAddress);
        cardAddress.classList.add('card-address', 'card-data');
        cardAddress.textContent = submission['address'];

        const deleteButton = document.createElement('button');
        cardContainer.appendChild(deleteButton);
        deleteButton.classList.add('delete-button');
        deleteButton.textContent = "Delete";
        deleteButton.addEventListener('click', () => {
            deleteSubmit(`submit-${id}`);
        });
    }

    function deleteSubmit(submissionId) {
        let submissions = JSON.parse(localStorage.getItem('submissions')) || [];
        if (submissions.length === 0) {
            return;
        }

        const id = Number(submissionId.split("submit-")[1]);

        submissions.splice(id, 1);
        localStorage.setItem('submissions', JSON.stringify(submissions));

        const element = document.getElementById(submissionId);
        element.parentNode.removeChild(element);
    }
  learner_created: true
- name: src/style/main.css
  visible: true
  text: |-
    body {
        font-family: McLaren sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-flow: column;
        padding: 0;
        margin: 0;
        background: #212121;
    }

    button:hover {
        font-size: 1em;
        align-self: center;
        margin-bottom: 0.3em;
        padding: 0.4em 0.8em;
        border: 2px solid #925e10;
        border-radius: 5px;
        background: #121212;
    }

    button {
        font-size: 1em;
        align-self: center;
        margin-top:  0.5em;
        margin-bottom: 0.3em;
        padding: 0.4em 0.8em;
        border: 2px solid #1b1b1b;
        border-radius: 5px;
        background: #121212;
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18643#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 29 Jun 2022 07:20:51 UTC
record: -1
