type: edu
custom_name: The magic begins!
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    import path from 'path';

    const pagePath = path.join(import.meta.url, '../../src/index.html');
    import {StageTest, correct, wrong, WrongAnswer} from 'hs-test-web';

    class Test extends StageTest {

        page = this.getPage(pagePath)

        tests = [
            this.node.execute(async () => {
                this.firstNameInput = await this.page.findBySelector("input[name='first-name']");
                if (this.firstNameInput == null) {
                    return wrong("Can't find input tag with name 'first-name'!")
                }

                this.lastNameInput = await this.page.findBySelector("input[name='last-name']");
                if (this.lastNameInput == null) {
                    return wrong("Can't find input tag with name 'last-name'!")
                }

                this.email = await this.page.findBySelector("input[name='email']");
                if (this.email == null) {
                    return wrong("Can't find input tag with name 'email'!")
                }

                this.phone = await this.page.findBySelector("input[name='phone']");
                if (this.phone == null) {
                    return wrong("Can't find input tag with name 'phone'!")
                }

                this.company = await this.page.findBySelector("input[name='company']");
                if (this.company == null) {
                    return wrong("Can't find input tag with name 'company'!")
                }

                this.address = await this.page.findBySelector("input[name='address']");
                if (this.address == null) {
                    return wrong("Can't find input tag with name 'address'!")
                }

                const submitButton = await this.page.findById("submit-button");
                if (submitButton == null) {
                    return wrong("Can't find a button with 'submit-button' id!")
                }

                return correct()
            }),
            this.node.execute(async () => {
                this.navbar = await this.page.findBySelector("nav");
                if (this.navbar == null) {
                    return wrong("Can't find <nav> element!");
                }

                this.submitFormNavButton = await this.navbar.findBySelector("a#form-link");
                if (this.submitFormNavButton == null) {
                    return wrong("Can't find <a> tag with '#form-link' id inside of the <nav> tag!")
                }

                this.historyNavButton = await this.navbar.findBySelector("a#history-link");
                if (this.historyNavButton == null) {
                    return wrong("Can't find <a> tag with '#history-link' id inside of the <nav> tag!")
                }

                return correct();
            }),
            this.node.execute(async () => {
                const values = [
                    await this.firstNameInput.getProperty('value'),
                    await this.lastNameInput.getProperty('value'),
                    await this.email.getProperty('value'),
                    await this.phone.getProperty('value'),
                    await this.company.getProperty('value'),
                    await this.address.getProperty('value'),
                ]

                values.forEach(value => {
                    if (value !== '') {
                        throw new WrongAnswer("All input fields should be empty at the beginning!")
                    }
                })

                return correct()
            }),
            this.node.execute(async () => {
                const testFirstName = 'Monica'
                await this.firstNameInput.inputText(testFirstName)
                await this.page.refresh()

                let firstNameValue = await this.firstNameInput.getProperty('value')
                if (firstNameValue !== testFirstName) {
                    return wrong("After reloading the page, input field with name 'first-name' has wrong value!\n" +
                        "Expected: '" + testFirstName + "'\n" +
                        "Found: '" + firstNameValue + "'")
                }

                const testLastName = 'Meyers'
                await this.lastNameInput.inputText(testLastName)
                await this.page.refresh()

                let lastNameValue = await this.lastNameInput.getProperty('value')
                if (lastNameValue !== testLastName) {
                    return wrong("After reloading the page, input field with name 'last-name' has wrong value!\n" +
                        "Expected: '" + testLastName + "'\n" +
                        "Found: '" + lastNameValue + "'")
                }

                const testEmail = 'test@gmail.com'
                await this.email.inputText(testEmail)
                await this.page.refresh()

                let emailValue = await this.email.getProperty('value')
                if (emailValue !== testEmail) {
                    return wrong("After reloading the page, input field with name 'email' has wrong value!\n" +
                        "Expected: '" + testEmail + "'\n" +
                        "Found: '" + emailValue + "'")
                }

                const testPhone = '12345678'
                await this.phone.inputText(testPhone)
                await this.page.refresh()

                let phoneValue = await this.phone.getProperty('value')
                if (phoneValue !== testPhone) {
                    return wrong("After reloading the page, input field with name 'phone' has wrong value!\n" +
                        "Expected: " + testPhone + "'\n" +
                        "Found: '" + phoneValue + "'")
                }

                const testCompany = 'Hyperskill'
                await this.company.inputText(testCompany)
                await this.page.refresh()

                let companyValue = await this.company.getProperty('value')
                if (companyValue !== testCompany) {
                    return wrong("After reloading the page, input field with name 'company' has wrong value!\n" +
                        "Expected: " + testCompany + "'\n" +
                        "Found: '" + companyValue + "'")
                }

                const testAddress = '4733 Reppert Coal Road, Southfield, Michigan'
                await this.address.inputText(testAddress)
                await this.page.refresh()

                let addressValue = await this.address.getProperty('value')
                if (addressValue !== testAddress) {
                    return wrong("After reloading the page, input field with name 'address' has wrong value!\n" +
                        "Expected: " + testAddress + "'\n" +
                        "Found: '" + addressValue + "'")
                }

                // test a couple of the previous fields
                firstNameValue = await this.firstNameInput.getProperty('value')
                if (firstNameValue !== 'Monica') {
                    return wrong("After reloading the page, input field with name 'first-name' has wrong value!\n" +
                        "Expected: 'Monica'\n" +
                        "Found: '" + firstNameValue + "'")
                }

                phoneValue = await this.phone.getProperty('value')
                if (phoneValue !== testPhone) {
                    return wrong("After reloading the page, input field with name 'phone' has wrong value!\n" +
                        "Expected: " + testPhone + "'\n" +
                        "Found: '" + phoneValue + "'")
                }

                return correct();
            })
        ]
    }

    it("Test stage", async () => {
            await new Test().runTests()
        }
    ).timeout(30000);
  learner_created: false
- name: src/style/style.css
  visible: true
  text: |+
    main {
        width: 50%;
        display: flex;
        justify-content: center;
    }

    form {
        min-width: 100%;
        max-width: 100%;

        margin: 0;
        padding: 0;

        display: flex;
        flex-flow: column;
        justify-content: flex-start;
        align-items: flex-start;
    }

    form label {
        margin: 1em 0 0.5em 0.3em;
        width: 100%;
    }

    form input {
        display: block;
        outline: none;
        width: 100%;
        height: 2em;
        padding: 0.5em;
        border: 1px solid black;
        border-radius: 5px;
        background: transparent;
    }

    form input:focus {
        border: 1px solid #212529;
        border-radius: 5px;
        background: transparent;
    }

    form input:focus::placeholder{
        color: transparent;
    }
    form button {
        font-size: 1em;
        align-self: center;
        margin: 1em;
        padding: 0.4em 0.8em;
        border: 2px solid black;
        border-radius: 5px;
        background: black;
    }

    form button:hover {
        font-size: 1em;
        align-self: center;
        margin: 1em;
        padding: 0.4em 0.8em;
        border: 2px inset black;
        border-radius: 5px;
        background: #212529;
    }

  learner_created: true
- name: src/style/header.css
  visible: true
  text: |-
    body {
        font-family: McLaren sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-flow: column;
        padding: 0;
        margin: 0;
        background: #383838;
    }

    header {
        margin: 0;
        background: #212529;
        width: 100%;
        min-height: 3em;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    header nav {
        min-width: 50%;
        max-width: 50%;
        min-height: 3em;

        display: flex;
        flex-flow: row;
        justify-content: flex-start;
        align-items: center;
        flex-basis: border-box;
    }

    header nav a {
        margin: 0 1em 0  0;
        text-decoration: none;
        color: white;
        border: 1px solid transparent;
        padding: 0.5em;
    }

    header nav a:hover {
        background: #383838;
        border: 1px solid #383838;
        border-radius: 10px;
    }
  learner_created: true
- name: src/script/form.js
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18641#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 28 Jun 2022 18:38:38 UTC
record: 2
